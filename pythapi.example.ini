## Basic configuration file of pythapi

[core.general]
## Loglevel verbosity
## 0: Only show critical errors
## 1: Show errors
## 2: Show warnings
## 3: Show successes
## 4: Show infos
## 5: Show access logs
## 6: Show debugging infos
loglevel = 6

## If false, the logs are in a syntax which is easier to read for machines.
colored_logs = true
file_logging_enabled = false

## [time] is a placeholder for the current date and time
logfile = pythapilog_[time].log

## Set the permitted user, who can start pythapi
user = root

## Select a prefered language (Doesn't affect the logs).
default_language = DE

## You can enable only a few plugins if you wish eg.:
## Comment this value to enable all plugins
## IMPORTANT: This value needs the FILENAME of the plugin instead of the plugin name
enabled_plugins = auth, info, data, dlanguage, time_plugin, async_jobs

## You can include additional config files here
#include_files = /etc/pythapi/conf.d/*, /tmp/pythapi.ini
include_files = /etc/pythapi/pythapi.ini

[core.mysql]
hostname = localhost
username = pythapi
password = changeme
database = pythapi
port = 3306

## This is a table prefix you can set, if you have only one database for multiple applications
prefix = pa_

[core.web]
## 0.0.0.0 means it listens to all IPs
bind_ip = 0.0.0.0

## You open multiple Ports if you enter them in a comma-seperated list
#http_port = 8123, 81230, 81231
http_port = 8123

## HTTPS part
https_enabled = false

## Only needed if https_enabled is true
ssl_cert_file = certfile.crt
ssl_key_file = keyfile.key

## Same as 'http_port'
https_port = 8124

[auth]
## The salt inreases the security of the hashed password dramatically
## It is important to have a unique string on every pythapi installation
## Please generate this string by yourself
## In linux:
##     tr -dc A-Za-z0-9 </dev/urandom | head -c 64
sec_salt = GENERATE_A_STRING__JUST_DO_IT

## Brute force settings:
## Set the time to wait if using basic-auth
bf_basic_auth_delay = 0.5

## If enabled, every time a IP failed to login, the IP will be banned for a doubled timeperiod
bf_temporary_ban_enabled = true

## Session settings:
## Set the maximum valid time in seconds for a session
## 604800 = 1 Week
session_expiration_time = 604800

## Limit how many sessions can be created
session_create_limit = 1000

[info]
## Exclude some properties if needed
action_property_blacklist = roles
plugin_property_blacklist = i_loaded

## If true a non-privilleged user cannot see any actions he isn't permitted to
hide_prohibited_actions = true

## You can set every plugin as essential, which means that pythapi won't start if this plugin couldn't load properly
#essential =  true

[lets_encrypt]
#acme_directory = https://acme-v02.api.letsencrypt.org/directory
acme_directory = https://acme-staging-v02.api.letsencrypt.org/directory
base_key_directory = /etc/pythapi/lets_encrypt

## If you change it to yes, you skip the message during the installation
## Terms of Use: https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf
termsOfUse_accepted = false

rsa_keysize = 4096
contact_data = mailto:max.mustermann@example.org

## These fields are optional
## They are used for the certificates
## Just comment to disable the fields
cert_country_name = DE
cert_state_name = Northrine-Westfalia
cert_locality_name = Cologne
#cert_organisation_name = Example AG
#cert_organisationUnit_name = Example Department

## Define a interval for checking is the certificates needs to be renewed
## The syntax is similar to crons syntax
autoRefresh_minute = 0
autoRefresh_hour = 3
autoRefresh_dayOfWeek = *
autoRefresh_dayOfMonth = *
autoRefresh_month = *
autoRefresh_year = *

autoRefresh_minDaysReaming = 1

#dns_verification_servers = 127.0.0.1

## To avoid directories like "*.example.org" you can define an alternative string to replace with the *
wildcard_replace_character = _

[alert_mail]
## Enter multiple recievers separated by ,
recievers = test@example.org
sender = pythapi-alerter
target_loglevel = 2
## multiple filters supported eg.
#regex_filter =  critical
#                [9-0]+ failed
regex_filter = .*

subject = Pythapi alert at {hostname}

body =      <font face="verdana">
            <h2>Pythapi returned an error.</h2><br>
            <table>
                <tr>
                    <td>Time:</td>
                    <td>{time}</td>
                </tr>
                <tr>
                    <td>Hostname:</td>
                    <td>{hostname}</td>
                </tr>
                <tr>
                    <td>Process ID:</td>
                    <td>{processid}</td>
                </tr>
                <tr>
                    <td>Severity:</td>
                    <td>{severity}</td>
                </tr>
                <tr>
                    <td>Message:</td>
                    <td>{message}</td>
                </tr>
            </table></font>

[telegram]
## Enter the token of the bot.
bot_token = TOKENHERE

## Enable/Disable the backgroundworker to handle incoming messages
input_handler_enabled = true
